<%= form_with(model: inspection, local: true, builder: CustomFormBuilder, class: "space-y-4 max-w-md mx-auto bg-gray-900 text-white p-6 rounded-lg shadow-md") do |form| %>
  <% if @inspection.errors.any? %>
    <% error_messages = @inspection.errors.full_messages.uniq.map { |msg| "<li>#{msg}</li>" }.join %>
    <%= javascript_tag do %>
      Swal.fire({
      icon: 'error',
      title: 'Errores encontrados',
      html: '<ul style="text-align: left;">' + '<%= raw error_messages %>' + '</ul>',
      confirmButtonText: 'Entendido'
      })
    <% end %>
  <% end %>

  <!-- ================== CAMPOS DEL FORMULARIO ================== -->
  <div class="mt-3">
    <%= form.label :number, "Número de inspección.", class: "block text-gray-300" %>
    <%= form.number_field :number, min:1, class: "mt-1 block w-full px-3 py-2 bg-gray-700 text-white border border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" %>
  </div>

  <% if @manual_action_name == 'new' %>
    <div>
      <%= form.label :group_id, "Clasificación del ascensor", class: "block text-gray-300" %>
      <%= form.select :group_id, options_for_select([['Seleccione un grupo', 'bad']] + Group.all.map { |g| [g.name, g.id] }, selected: @item&.group_id), {}, class: "mt-1 block w-full px-3 py-2 bg-gray-700 text-white border border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" %>
    </div>

    <div class="mt-3">
      <%= form.label :rerun, "Marcar si es que es reinspección (se le hizo una inspección hace 3 meses).", class: "block text-gray-300" %>
      <%= form.check_box :rerun, class: "mt-1 bg-gray-700 border-gray-600 rounded-md focus:ring-blue-500 focus:border-blue-500 text-blue-600" %>
    </div>

    <div data-controller="principal-select">
      <div>
        <%= form.label :principal_id, "Empresa cliente", class: "block text-gray-300" %>
        <%= form.collection_select :principal_id, Principal.all, :id, :name, { prompt: 'Selecciona una empresa' }, { class: "mt-1 block w-full px-3 py-2 bg-gray-700 text-gray-700 border border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm", data: { controller: 'slim', principal_select_target: "principal", action: "change->principal-select#updateItems" }, selected: @item&.principal_id } %>
      </div>

      <div class="mt-3">
        <%= form.label :identificador, "Identificador", class: "block text-gray-300" %>
        <%= form.text_field :identificador, value: @item&.identificador, list: "identificador-options", maxlength: 100, class: "block w-full px-3 py-2 bg-gray-700 text-white border border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" %>
        <p id="floating_helper_text" class="mt-2 text-xs text-gray-400">Dejar en blanco si no se conoce</p>
        <datalist id="identificador-options" data-principal-select-target="identificadorList">
        </datalist>
      </div>
    </div>
  <% elsif @manual_action_name == 'new_with_last' %>
    <div class="mt-3">
      <%= form.label :identificador, "Identificador", class: "block text-gray-300" %>
      <%= form.text_field :identificador, value: @item.identificador, maxlength: 100, class: "block w-full px-3 py-2 bg-gray-700 text-white border border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm", readonly: true %>

      <div class="mt-3">
        <%= form.label :rerun, "Marcar si es que es reinspección (se le hizo una inspección hace 3 meses).", class: "block text-gray-300" %>
        <%= form.check_box :rerun, class: "mt-1 bg-gray-700 border-gray-600 rounded-md focus:ring-blue-500 focus:border-blue-500 text-blue-600" %>
      </div>

      <%= form.hidden_field :group_id, value: @item.group.id %>
      <%= form.hidden_field :principal_id, value: @item.principal.id %>
  <% end %>

  <div class="mt-3">
    <%= form.label :name, "Puedes ingresar un nombre para identificar la inspección.", class: "block text-gray-300" %>
    <%= form.text_field :name, class: "mt-1 block w-full px-3 py-2 bg-gray-700 text-white border border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" %>
  </div>

  <%= form.hidden_field :place, id: "inspection_place" %>

  <div class="mt-3">
    <%= form.label :region, "Región", class: "block text-gray-300" %>
    <%= form.select :region,
                    options_for_select(communes_by_region.keys),
                    { prompt: "Selecciona Región" },
                    { class: "mt-1 block w-full px-3 py-2 bg-gray-700 text-white border border-gray-600 rounded-md",
                      id: "inspection_region",
                      data: { controller: "slim-select" },
                      required: true
                    } %>
  </div>

  <div class="mt-3">
    <%= form.label :comuna, "Comuna", class: "block text-gray-300" %>
    <%= form.select :comuna,
                    [],
                    { prompt: "Selecciona Comuna" },
                    { class: "mt-1 block w-full px-3 py-2 bg-gray-700 text-white border border-gray-600 rounded-md",
                      id: "inspection_comuna",
                      data: { controller: "slim-select" },
                      required: true
                    } %>
  </div>

  <div class="mt-3">
    <%= form.label :calle, "Calle", class: "block text-gray-300" %>
    <%= form.text_field :calle,
                        class: "mt-1 block w-full px-3 py-2 bg-gray-700 text-white border border-gray-600 rounded-md",
                        id: "inspection_calle",
                        required: true %>
  </div>

  <div class="mt-3">
    <%= form.label :ins_date, "Fecha de inspección", class: "block text-gray-300" %>
    <%= form.date_field :ins_date, class: "mt-1 block w-full px-3 py-2 bg-gray-700 text-white border border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" %>
  </div>

  <div class="mt-3">
    <%= form.label :validation, "Periodicidad", class: "block text-gray-300" %>
    <%= form.select :validation, options_for_select([['1 año', 1], ['2 años', 2]]), {}, class: "mt-1 block w-full px-3 py-2 bg-gray-700 text-white border border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" %>
  </div>

  <% if Current.user.admin || Current.user.crear %>
    <div class="mt-3">
      <%= form.label :user_ids, "Inspectores asignados", class: "block text-gray-300" %>
      <%= form.collection_select :user_ids, User.admin_false_o_inspeccionar, :id, :real_name, {}, { multiple: true, size: 2, class: "mt-1 block w-full px-3 py-2 bg-gray-700 text-gray-700 border border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm", data: { controller: 'slim' } } %>
    </div>
  <% end %>

  <!-- ================== FACTURACIÓN SELECCIONADA ================== -->
  <!-- Este es el campo oculto donde guardamos facturacion_id -->
  <%= form.hidden_field :facturacion_id, id: "inspection_facturacion_id" %>

  <!-- Visualización de la Facturación elegida -->
  <div class="mt-3">
    <%= form.label :facturacion_id, "Facturación Seleccionada", class: "block text-gray-300" %>
    <div class="flex items-center gap-2 mt-2">
      <span id="facturacion_selected_display" class="text-gray-200">
        <% if @inspection.facturacion&.number.present? %>
          <%= @inspection.facturacion.number %>
        <% else %>
          Ninguna seleccionada
        <% end %>
      </span>

      <!-- Botón para abrir el modal -->
      <button type="button"
              onclick="openFacturacionModal()"
              class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        Buscar Facturación
      </button>
    </div>
  </div>

  <%= form.hidden_field :manual_action_name, value: @manual_action_name %>

  <div class="mt-6 py-5">
    <%= form.submit "#{inspection.new_record? ? 'Crear' : 'Actualizar'} Inspección", class: "w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline cursor-pointer" %>
  </div>
<% end %>

<!-- ============================= MODAL ============================= -->
<div id="facturacionModal"
     class="hidden fixed inset-0 bg-black bg-opacity-70 z-50 flex items-center justify-center"
     onclick="closeWhenClickOutside(event)">
  <div class="modal-content relative w-11/12 max-w-6xl bg-gray-800 p-6 rounded shadow-md"
       style="overflow-y: auto; min-height: 600px; max-height: 85vh;"
       onclick="event.stopPropagation()">
    <!-- Botón "X" para cerrar -->
    <button type="button"
            class="absolute top-4 right-4 text-white text-2xl font-bold"
            onclick="closeFacturacionModal()">
      &times;
    </button>

    <!-- Se carga la vista facturacions#index (o cotizaciones#index) -->
    <turbo-frame id="facturacions_frame" src="<%= facturacions_path %>">
      Cargando Facturaciones...
    </turbo-frame>
  </div>
</div>
</div>

<script>
    // -----------------------------------
    // ABRIR / CERRAR MODAL
    // -----------------------------------
    function openFacturacionModal() {
        document.getElementById('facturacionModal').classList.remove('hidden');
        document.body.classList.add('overflow-hidden'); // Evita scroll de fondo
    }
    function closeFacturacionModal() {
        document.getElementById('facturacionModal').classList.add('hidden');
        document.body.classList.remove('overflow-hidden'); // Restaura scroll
    }
    function closeWhenClickOutside(e) {
        if(e.target.id === "facturacionModal") {
            closeFacturacionModal();
        }
    }
    // Cerrar con ESC
    document.addEventListener("keydown", function(e) {
        if(e.key === "Escape") closeFacturacionModal();
    });

    // -----------------------------------
    // onSelectFacturacion
    // -----------------------------------
    function onSelectFacturacion(facturacionId, facturacionNumber) {
        console.log("Seleccionaste Facturación:", facturacionId, facturacionNumber);

        // 1) Colocamos el ID en el campo oculto
        const hiddenField = document.getElementById('inspection_facturacion_id');
        if(hiddenField) hiddenField.value = facturacionId;

        // 2) Mostramos el número en el <span>
        const displaySpan = document.getElementById('facturacion_selected_display');
        if(displaySpan) displaySpan.textContent = facturacionNumber;

        // 3) Cerrar el modal
        closeFacturacionModal();
    }


    // -----------------------------------
    //  prepareFacturacionsTable(tableEl)
    //  1) Elimina filas sin OC o con Factura
    //  2) Quita columnas 7, 8
    //  3) Agrega columna "Seleccionar"
    // -----------------------------------
    function prepareFacturacionsTable(tableEl) {
        const theadRow = tableEl.querySelector("thead tr");
        const tbodyRows = tableEl.querySelectorAll("tbody tr");

        // 1) Remover filas no deseadas
        tbodyRows.forEach(row => {
            const tds = row.querySelectorAll("td");
            if(tds.length < 9) return;

            const ocValue      = tds[6].textContent.trim(); // col 6
            const facturaValue = tds[7].textContent.trim(); // col 7
            // Solo deben quedar las que tienen ocValue y NO tienen facturaValue
            if(!ocValue || facturaValue) {
                row.remove();
            }
        });

        // 2) Quitar las columnas 7, 8 en thead (Factura y Fecha inspección)
        const ths = theadRow.querySelectorAll("th");
        if(ths.length >= 9) {
            theadRow.removeChild(ths[8]); // col 8
            theadRow.removeChild(ths[7]); // col 7
        }

        // 3) Quitar esas mismas columnas en cada fila
        const finalRows = tableEl.querySelectorAll("tbody tr");
        finalRows.forEach(row => {
            const cells = row.querySelectorAll("td");
            if(cells.length >= 9) {
                cells[8].remove(); // col 8
                cells[7].remove(); // col 7
            }
        });

        // 4) Agregar nueva columna "Seleccionar"
        const newTh = document.createElement("th");
        newTh.className = "px-6 py-3 text-left text-xs font-medium uppercase tracking-wider";
        newTh.textContent = "Seleccionar";
        theadRow.appendChild(newTh);

        // 5) Añadir el botón en cada fila (usando data-attributes)
        finalRows.forEach(row => {
            const tds = row.querySelectorAll("td");
            if(tds.length < 7) return;

            let facturacionId = null;
            let facturacionNumber = null;

            // Busca el ID y número en la primera columna (según tu URL)
            const link = tds[0].querySelector("a");
            if(link) {
                const href = link.getAttribute("href") || "";
                // Cambia "cotizaciones" según tu URL real
                const match = href.match(/cotizaciones\/(\d+)/);
                if(match) {
                    facturacionId = match[1];                  // e.g. "274"
                    facturacionNumber = link.textContent.trim();  // e.g. "201"
                }
            }

            const selectTd = document.createElement("td");
            selectTd.className = "px-6 py-4 whitespace-normal";

            if(facturacionId && facturacionNumber) {
                const btn = document.createElement("button");
                btn.type = "button";
                btn.className = "seleccionar-facturacion bg-green-600 hover:bg-green-700 text-white font-bold py-1 px-3 rounded";
                btn.textContent = "Seleccionar";

                // En lugar de onclick, usamos data-attributes
                btn.setAttribute("data-facturacion-id", facturacionId);
                btn.setAttribute("data-facturacion-number", facturacionNumber);

                selectTd.appendChild(btn);
            } else {
                selectTd.textContent = "—";
            }
            row.appendChild(selectTd);
        });
    }

    // -----------------------------------
    // initFacturacionsTable():
    // Aplica DataTable (simple-datatables)
    // -----------------------------------
    function initFacturacionsTable() {
        const tableEl = document.getElementById("facturacions-table");
        if(!tableEl || typeof simpleDatatables === "undefined" || !simpleDatatables.DataTable) return;

        const columnsWithoutFilter = [2,3,4,6];
        new simpleDatatables.DataTable(tableEl, {
            columns: [
                { select: 2, searchable: false },
                { select: 3, searchable: false },
                { select: 4, searchable: false },
                { select: 6, searchable: false },
            ],
            labels: {
                placeholder: "Buscar...",
                perPage: "Registros por pág.",
                noRows: "No hay datos para mostrar",
                noResults: "No hay resultados que coincidan con tu búsqueda",
                info: "Mostrando {start} a {end} de {rows} entradas"
            },
            tableRender: function(_data, table, type) {
                // Se ejecuta cada vez que la tabla se renderiza
                if(type === "print") return table;

                const thead = table.querySelector("thead");
                if(!thead) return table;

                const firstRow = thead.querySelector("tr");
                if(!firstRow) return table;

                // Fila de inputs de búsqueda
                const filterHeaders = {
                    nodeName: "TR",
                    attributes: { class: "search-filtering-row bg-gray-800 text-white" },
                    childNodes: []
                };

                const allTH = firstRow.querySelectorAll("th");
                allTH.forEach((th, index) => {
                    if(columnsWithoutFilter.includes(index)) {
                        filterHeaders.childNodes.push({
                            nodeName: "TH",
                            attributes: { style: "padding-top: 1rem;" },
                            childNodes: [{
                                nodeName: "INPUT",
                                attributes: {
                                    type: "search",
                                    disabled: "disabled",
                                    placeholder: "Sin filtro",
                                    class: "datatable-input text-white placeholder-gray-400 bg-gray-700 border-gray-600 w-full cursor-not-allowed opacity-50"
                                }
                            }]
                        });
                    } else {
                        filterHeaders.childNodes.push({
                            nodeName: "TH",
                            attributes: { style: "padding-top: 1rem;" },
                            childNodes: [{
                                nodeName: "INPUT",
                                attributes: {
                                    class: "datatable-input text-white placeholder-gray-400 bg-gray-700 border-gray-600 w-full",
                                    type: "search",
                                    "data-columns": `[${index}]`,
                                    placeholder: "Filtrar"
                                }
                            }]
                        });
                    }
                });
                thead.appendChild(simpleDatatables.helpers.createElement(filterHeaders));
                return table;
            }
        });
    }
    // -----------------------------------
    // initFlatpickrFilters(): (Opcional, si usas date-filters)
    // -----------------------------------
    function initFlatpickrFilters() {
        const startDate   = document.querySelector("[data-date-filter-target='startDate']");
        const endDate     = document.querySelector("[data-date-filter-target='endDate']");
        const submitButton= document.querySelector("[data-date-filter-target='submitButton']");
        if(!submitButton) return;

        function clearButtonPlugin() {
            return fp => ({
                onReady: () => {
                    const clearBtn = document.createElement("button");
                    clearBtn.type = "button";
                    clearBtn.textContent = "Quitar fecha";
                    clearBtn.className = "flatpickr-clear-btn";
                    clearBtn.addEventListener("click", () => {
                        fp.clear();
                        fp.close();
                    });
                    fp.calendarContainer.appendChild(clearBtn);
                }
            });
        }

        if(startDate) {
            flatpickr(startDate, {
                dateFormat: "d-m-Y",
                locale: "es",
                onChange: () => submitButton.click(),
                plugins: [ clearButtonPlugin() ]
            });
        }
        if(endDate) {
            flatpickr(endDate, {
                dateFormat: "d-m-Y",
                locale: "es",
                onChange: () => submitButton.click(),
                plugins: [ clearButtonPlugin() ]
            });
        }
    }

    // -----------------------------------
    // Al cargar el turbo-frame (facturacions_frame)
    // -----------------------------------
    document.addEventListener("turbo:frame-load", function(e) {
        if(e.target.id === "facturacions_frame") {
            const tableEl = document.getElementById("facturacions-table");

            // Quitar filas sin OC o con Factura, etc.
            if(tableEl) prepareFacturacionsTable(tableEl);

            // Si usas date-filters
            initFlatpickrFilters();

            // Inicia DataTables
            initFacturacionsTable();

            // Abre links en pestaña nueva
            if(tableEl) {
                tableEl.querySelectorAll("a").forEach(a => a.target = '_blank');
            }

            // **Delegación de eventos**: Al hacer click en los botones "Seleccionar"
            tableEl.addEventListener("click", function(ev) {
                if(ev.target.matches("button.seleccionar-facturacion")) {
                    const fid = ev.target.getAttribute("data-facturacion-id");
                    const fnum = ev.target.getAttribute("data-facturacion-number");
                    onSelectFacturacion(fid, fnum);
                }
            });
        }
    });

    // -----------------------------------
    // Script tuyo para dirección
    // -----------------------------------
    document.addEventListener("turbo:load", () => {
        const places = <%= communes_by_region.to_json.html_safe %>;
        const regionSelect = document.getElementById("inspection_region");
        if(!regionSelect) return;

        const comunaSelect = document.getElementById("inspection_comuna");
        const calleInput   = document.getElementById("inspection_calle");
        const placeHidden  = document.getElementById("inspection_place");

        regionSelect.addEventListener("change", function() {
            const region = regionSelect.value;
            const comunas = places[region] || [];

            while(comunaSelect.firstChild) {
                comunaSelect.removeChild(comunaSelect.firstChild);
            }

            const defaultOption = document.createElement("option");
            defaultOption.value = "";
            defaultOption.textContent = "Selecciona Comuna";
            comunaSelect.appendChild(defaultOption);

            comunas.forEach((comuna) => {
                const option = document.createElement("option");
                option.value = comuna;
                option.textContent = comuna;
                comunaSelect.appendChild(option);
            });

            comunaSelect.value = "";
            updatePlace();
        });

        function updatePlace() {
            const comuna = comunaSelect.value;
            const calle  = calleInput.value;
            placeHidden.value = comuna ? `${calle}, ${comuna}` : calle;
        }

        comunaSelect.addEventListener("change", updatePlace);
        calleInput.addEventListener("input",  updatePlace);
    });
</script>
